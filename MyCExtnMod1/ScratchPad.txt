
Open VS2015 CMD window
cd C:\Work0\MySimplePyC\MyCExtnMod1

SET VS90COMNTOOLS=%VS140COMNTOOLS%
python setup.py build_ext --inplace

copy MyCExtnMod1.pyd to your folder where you plan to run Python script


PY_MAJOR_VERSION
MY_PY_DIR=C:\Dev\Python27

A C extension for CPython is a shared library (e.g. a .so file on Linux, .pyd on Windows), which exports an initialization function.
C function always has two arguments, conventionally named self and args

PyMethodDef



VS
{
VS Working with Project Properties
https://msdn.microsoft.com/en-us/library/669zx6zc.aspx


Visual Studio Python Tutorial Deep Dive: Creating Native Modules
https://www.youtube.com/watch?v=D9RlT06a1EI


Visual C++ debug library naming convention
http://stackoverflow.com/questions/14923953/visual-c-debug-library-naming-convention



Error	LNK1104	cannot open file 'python27_d.lib'	
Basically, the header file pyconfig.h that ships with Python (in C:\Python27\include\) forces linking to python27_d.lib 
in Debug build (via a #pragma comment() directive), regardless of whether this library exists or not.

}


Extending Python with C or C++
{

https://docs.python.org/2/extending/extending.html

Extending Python with C
https://www.youtube.com/watch?v=CYDakDJv2p4

}




Unable to find vcvarsall.bat.
{
http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat
http://stackoverflow.com/questions/3047542/building-lxml-for-python-2-7-on-windows

While running setup.py for package installations, Python 2.7 searches for an installed Visual Studio 2008. You can trick Python to use a newer Visual Studio by setting the correct path in VS90COMNTOOLS environment variable before calling setup.py.

Execute the following command based on the version of Visual Studio installed:

Visual Studio 2010 (VS10): SET VS90COMNTOOLS=%VS100COMNTOOLS%
Visual Studio 2012 (VS11): SET VS90COMNTOOLS=%VS110COMNTOOLS%
Visual Studio 2013 (VS12): SET VS90COMNTOOLS=%VS120COMNTOOLS%
Visual Studio 2015 (VS14): SET VS90COMNTOOLS=%VS140COMNTOOLS%

}


Compile
{
C:\Work0\MySimplePyC\MyCExtnMod1>python setup.py build_ext
running build_ext
building 'MyCExtnMod1' extension
creating build
creating build\temp.win-amd64-2.7
creating build\temp.win-amd64-2.7\Release
C:\VS2015\VC\BIN\amd64\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -IC:\Dev\Python27\include -IC:\Dev\Python27\PC /TcMyCExtnSrc1.c /Fobuild\temp.win-amd64-2.7\Release\MyCExtnSrc1.obj
MyCExtnSrc1.c
creating build\lib.win-amd64-2.7
C:\VS2015\VC\BIN\amd64\link.exe /DLL /nologo /INCREMENTAL:NO /LIBPATH:C:\Dev\Python27\libs /LIBPATH:C:\Dev\Python27\PCbuild\amd64 /LIBPATH:C:\Dev\Python27\PC\VS9.0\amd64 /EXPORT:initMyCExtnMod1 build\temp.win-amd64-2.7\Release\MyCExtnSrc1.obj /OUT:build\lib.win-amd64-2.7\MyCExtnMod1.pyd /IMPLIB:build\temp.win-amd64-2.7\Release\MyCExtnMod1.lib /MANIFESTFILE:build\temp.win-amd64-2.7\Release\MyCExtnMod1.pyd.manifest
MyCExtnSrc1.obj : warning LNK4197: export 'initMyCExtnMod1' specified multiple times; using first specification
   Creating library build\temp.win-amd64-2.7\Release\MyCExtnMod1.lib and object build\temp.win-amd64-2.7\Release\MyCExtnMod1.exp
}